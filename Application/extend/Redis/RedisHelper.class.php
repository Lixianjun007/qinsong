<?php
namespace extend\Redis;

class RedisHelper extends \Redis{
    
    private  static $redis=null;
    
    /**
     *
     * RedisHelper constructor.
     * @param null $db
     * @param null $host
     * @param null $password
     * @param int  $port
     * @param int  $timeout
     */
    public function __construct($db = null, $host = null, $password = null, $port = 6379, $timeout= 3000) {
        parent::__construct();
        $redis_config = C('redis.store');
        $db = $db ?$db:$redis_config['baseDB'];//Config('redis.baseDB');
        $host = $host ?$host:$redis_config['host'];//Config('redis.host');
        $password = $password ?$password: $redis_config['password'];//Config('redis.password');
        $port = $port ?$port: $redis_config['port'];//Config('redis.port');
        $timeout = $timeout ?$timeout: $redis_config['timeout'];//Config('redis.timeout');
        //$this->connect($host, Config('redis.port'), Config('redis.timeout') ?: 5000);
        $this->connect($host, $port, $timeout);
        if(! empty($password)) {
            $this->auth($password);
        }
        $this->select($db);
    }
    
    /**
     * [getRedisInstance得到 一个redis实例，如果没有就创建]
     * @author yangkun   ]
     *
     * 【
     *    Note : this function haven`t belong to me ,it has been changed by 刘巧如,
     *    if there's a problem during use , contact @刘巧如 ,please!!!
     * 】
     * @copyright [Copyright(c) Email:vectormail@163.com]
     * @param null $db
     * @param null $host
     * @param null $password
     * @return RedisHelper
     */
    public static function getRedisInstance($db = null, $host = null, $password = null, $port = 6379, $timeout= 3000){
    
        if(empty(self::$redis) || (! empty($host) && $password !== null)) {
            self::$redis = new RedisHelper($db, $host, $password, $port, $timeout);
        }
        
        if(! empty($db)) {
            self::$redis->select($db);
        }

        return self::$redis;
    }
    
    /**
     * [getTsIncrId 通过redis自增特性得到一个线程安全的自增的id ]
     * @author yangkun
     * @copyright [Copyright(c) Email:vectormail@163.com]
     * @param $key
     * @return    [type]
     */
    public function getTsIncrId($key)
    {
        return $this->incr($key);
    }
    /**
     * Get the value related to the specified key
     * @author liuqiaoru
     * @param string $key
     * @param mixed $default
     * @return bool|null|string
     */
    public function get($key, $default = null) {
        if($this->exists($key)) {
            return parent::get($key); // TODO: Change the autogenerated stub
        } else {
            return $default;
        }
    }
    
    /**
     * Set the string value in argument as value of the key, with a time to live.
     * @author liuqiaoru
     * @param string $key
     * @param string    $value
     * @param int $ttl
     * @return bool
     */
    public function setex($key, $value, $ttl=1){
        return parent::setex($key, $ttl * 60, $value);
    }

    /**
     * 原始的setex
     * @param $key
     * @param $value
     * @param $ttl
     * @return bool
     */
    public function originalSetEx($key, $value, $ttl){
        return parent::setex($key, $ttl, $value);
    }
}